{"cells":[{"cell_type":"code","source":["from google.colab import drive"],"metadata":{"id":"A_2naHhAb_Ck"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["drive.mount('/content/drive')"],"metadata":{"id":"THm9HY2hccD0","executionInfo":{"status":"ok","timestamp":1714423823845,"user_tz":240,"elapsed":1968,"user":{"displayName":"Priya Gannavarapu","userId":"05698143431263140652"}},"outputId":"37c3117e-3710-4419-aca2-4bb1a83aa86e","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"id":"9-T68Vecctv1","executionInfo":{"status":"ok","timestamp":1714423826453,"user_tz":240,"elapsed":2610,"user":{"displayName":"Priya Gannavarapu","userId":"05698143431263140652"}},"outputId":"95708dbc-3d77-4ae5-d6ef-6df8b1f3a4f2","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"code","source":["pip install tensorflow"],"metadata":{"id":"-Vy96Qgqcxhc","executionInfo":{"status":"ok","timestamp":1714423842231,"user_tz":240,"elapsed":15781,"user":{"displayName":"Priya Gannavarapu","userId":"05698143431263140652"}},"outputId":"08ab3881-b3ef-42ac-a778-3f90fd40f62e","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: tensorflow in /usr/local/lib/python3.10/dist-packages (2.15.0)\n","Requirement already satisfied: absl-py>=1.0.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.4.0)\n","Requirement already satisfied: astunparse>=1.6.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.6.3)\n","Requirement already satisfied: flatbuffers>=23.5.26 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (24.3.25)\n","Requirement already satisfied: gast!=0.5.0,!=0.5.1,!=0.5.2,>=0.2.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (0.5.4)\n","Requirement already satisfied: google-pasta>=0.1.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (0.2.0)\n","Requirement already satisfied: h5py>=2.9.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (3.9.0)\n","Requirement already satisfied: libclang>=13.0.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (18.1.1)\n","Requirement already satisfied: ml-dtypes~=0.2.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (0.2.0)\n","Requirement already satisfied: numpy<2.0.0,>=1.23.5 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.25.2)\n","Requirement already satisfied: opt-einsum>=2.3.2 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (3.3.0)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from tensorflow) (24.0)\n","Requirement already satisfied: protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<5.0.0dev,>=3.20.3 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (3.20.3)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.10/dist-packages (from tensorflow) (67.7.2)\n","Requirement already satisfied: six>=1.12.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.16.0)\n","Requirement already satisfied: termcolor>=1.1.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (2.4.0)\n","Requirement already satisfied: typing-extensions>=3.6.6 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (4.11.0)\n","Requirement already satisfied: wrapt<1.15,>=1.11.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.14.1)\n","Requirement already satisfied: tensorflow-io-gcs-filesystem>=0.23.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (0.36.0)\n","Requirement already satisfied: grpcio<2.0,>=1.24.3 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.62.2)\n","Requirement already satisfied: tensorboard<2.16,>=2.15 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (2.15.2)\n","Requirement already satisfied: tensorflow-estimator<2.16,>=2.15.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (2.15.0)\n","Requirement already satisfied: keras<2.16,>=2.15.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (2.15.0)\n","Requirement already satisfied: wheel<1.0,>=0.23.0 in /usr/local/lib/python3.10/dist-packages (from astunparse>=1.6.0->tensorflow) (0.43.0)\n","Requirement already satisfied: google-auth<3,>=1.6.3 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.16,>=2.15->tensorflow) (2.27.0)\n","Requirement already satisfied: google-auth-oauthlib<2,>=0.5 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.16,>=2.15->tensorflow) (1.2.0)\n","Requirement already satisfied: markdown>=2.6.8 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.16,>=2.15->tensorflow) (3.6)\n","Requirement already satisfied: requests<3,>=2.21.0 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.16,>=2.15->tensorflow) (2.31.0)\n","Requirement already satisfied: tensorboard-data-server<0.8.0,>=0.7.0 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.16,>=2.15->tensorflow) (0.7.2)\n","Requirement already satisfied: werkzeug>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.16,>=2.15->tensorflow) (3.0.2)\n","Requirement already satisfied: cachetools<6.0,>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from google-auth<3,>=1.6.3->tensorboard<2.16,>=2.15->tensorflow) (5.3.3)\n","Requirement already satisfied: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.10/dist-packages (from google-auth<3,>=1.6.3->tensorboard<2.16,>=2.15->tensorflow) (0.4.0)\n","Requirement already satisfied: rsa<5,>=3.1.4 in /usr/local/lib/python3.10/dist-packages (from google-auth<3,>=1.6.3->tensorboard<2.16,>=2.15->tensorflow) (4.9)\n","Requirement already satisfied: requests-oauthlib>=0.7.0 in /usr/local/lib/python3.10/dist-packages (from google-auth-oauthlib<2,>=0.5->tensorboard<2.16,>=2.15->tensorflow) (1.3.1)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorboard<2.16,>=2.15->tensorflow) (3.3.2)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorboard<2.16,>=2.15->tensorflow) (3.7)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorboard<2.16,>=2.15->tensorflow) (2.0.7)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorboard<2.16,>=2.15->tensorflow) (2024.2.2)\n","Requirement already satisfied: MarkupSafe>=2.1.1 in /usr/local/lib/python3.10/dist-packages (from werkzeug>=1.0.1->tensorboard<2.16,>=2.15->tensorflow) (2.1.5)\n","Requirement already satisfied: pyasn1<0.7.0,>=0.4.6 in /usr/local/lib/python3.10/dist-packages (from pyasn1-modules>=0.2.1->google-auth<3,>=1.6.3->tensorboard<2.16,>=2.15->tensorflow) (0.6.0)\n","Requirement already satisfied: oauthlib>=3.0.0 in /usr/local/lib/python3.10/dist-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib<2,>=0.5->tensorboard<2.16,>=2.15->tensorflow) (3.2.2)\n"]}]},{"cell_type":"code","source":["pip install matplotlib"],"metadata":{"id":"jL8FiAt3c5Ln","executionInfo":{"status":"ok","timestamp":1714423853441,"user_tz":240,"elapsed":11214,"user":{"displayName":"Priya Gannavarapu","userId":"05698143431263140652"}},"outputId":"bf80d5bb-c35d-4e2a-ec76-736daa428af0","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: matplotlib in /usr/local/lib/python3.10/dist-packages (3.7.1)\n","Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (1.2.1)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (0.12.1)\n","Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (4.51.0)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (1.4.5)\n","Requirement already satisfied: numpy>=1.20 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (1.25.2)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (24.0)\n","Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (9.4.0)\n","Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (3.1.2)\n","Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (2.8.2)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.7->matplotlib) (1.16.0)\n"]}]},{"cell_type":"code","source":["pip install scikit-learn"],"metadata":{"id":"L1syCbssdAig","executionInfo":{"status":"ok","timestamp":1714423861010,"user_tz":240,"elapsed":7572,"user":{"displayName":"Priya Gannavarapu","userId":"05698143431263140652"}},"outputId":"b66c8f23-84d5-4c2b-92e8-d22714c8fd1a","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: scikit-learn in /usr/local/lib/python3.10/dist-packages (1.2.2)\n","Requirement already satisfied: numpy>=1.17.3 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.25.2)\n","Requirement already satisfied: scipy>=1.3.2 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.11.4)\n","Requirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.4.0)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (3.4.0)\n"]}]},{"cell_type":"code","source":["import os\n","import zipfile\n","import numpy as np\n","import tensorflow as tf\n","from tensorflow.keras.layers import Input, Conv2D, MaxPooling2D, Dropout, Conv2DTranspose, concatenate\n","from tensorflow.keras.models import Model\n","from tensorflow.keras.optimizers import Adam\n","from sklearn.model_selection import train_test_split\n","import matplotlib.pyplot as plt\n","from tensorflow.keras.preprocessing.image import ImageDataGenerator"],"metadata":{"id":"Q64c9viddLD2"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Upload your dataset (ZIP file expected)\n","from google.colab import files\n","uploaded = files.upload()\n","zip_path = list(uploaded.keys())[0]\n","\n","# Unzip the dataset\n","with zipfile.ZipFile(zip_path, 'r') as zip_ref:\n","    zip_ref.extractall('/content/dataset')\n","    print('Unzipped the dataset')\n","\n","# Assuming the dataset is structured as: 'dataset/train/{class_label}/*' and 'dataset/test/{class_label}/*'\n","train_path = '/content/dataset/Training'\n","test_path = '/content/dataset/Testing'\n"],"metadata":{"id":"oCK323rsdajy","executionInfo":{"status":"ok","timestamp":1714425244981,"user_tz":240,"elapsed":1383976,"user":{"displayName":"Priya Gannavarapu","userId":"05698143431263140652"}},"outputId":"6971e07a-c062-4a60-a9cb-86154d42a4fc","colab":{"base_uri":"https://localhost:8080/","height":90}},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-16f75745-a9cc-45aa-b7f9-faf829d5499b\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-16f75745-a9cc-45aa-b7f9-faf829d5499b\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving dataset.zip to dataset.zip\n","Unzipped the dataset\n"]}]},{"cell_type":"code","source":["train_datagen = ImageDataGenerator(\n","    rescale=1./255,\n","    shear_range=0.2,\n","    zoom_range=0.2,\n","    horizontal_flip=True,\n","    validation_split=0.2)  # using 20% of training data for validation\n","\n","test_datagen = ImageDataGenerator(rescale=1./255)\n","\n","train_generator = train_datagen.flow_from_directory(\n","    train_path,\n","    target_size=(128, 128),\n","    batch_size=32,\n","    class_mode='categorical',\n","    subset='training')\n","\n","validation_generator = train_datagen.flow_from_directory(\n","    train_path,\n","    target_size=(128, 128),\n","    batch_size=32,\n","    class_mode='categorical',\n","    subset='validation')"],"metadata":{"id":"lK7P_GML3hHj","executionInfo":{"status":"ok","timestamp":1714425244982,"user_tz":240,"elapsed":5,"user":{"displayName":"Priya Gannavarapu","userId":"05698143431263140652"}},"outputId":"ee9da5ab-7bc7-4dfb-ffd7-e8279c452f38","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Found 4571 images belonging to 4 classes.\n","Found 1141 images belonging to 4 classes.\n"]}]},{"cell_type":"code","source":["def unet_model(input_size=(128, 128, 3), classes=4):\n","    inputs = Input(input_size)\n","    conv1 = Conv2D(64, 3, activation='relu', padding='same', kernel_initializer='he_normal')(inputs)\n","    conv1 = Conv2D(64, 3, activation='relu', padding='same', kernel_initializer='he_normal')(conv1)\n","    pool1 = MaxPooling2D(pool_size=(2, 2))(conv1)\n","    # Additional downsampling and upsampling layers would be added here following U-Net architecture\n","    # For brevity, only showing two layers before flattening for classification\n","\n","    flat = tf.keras.layers.Flatten()(pool1)\n","    dense = tf.keras.layers.Dense(128, activation='relu')(flat)\n","    outputs = tf.keras.layers.Dense(classes, activation='softmax')(dense)\n","\n","    model = Model(inputs=inputs, outputs=outputs)\n","    model.compile(optimizer=Adam(lr=1e-4), loss='categorical_crossentropy', metrics=['accuracy'])\n","    return model\n","\n","model = unet_model()\n","model.summary()\n"],"metadata":{"id":"4N_inipa3sox","executionInfo":{"status":"ok","timestamp":1714425246561,"user_tz":240,"elapsed":1582,"user":{"displayName":"Priya Gannavarapu","userId":"05698143431263140652"}},"outputId":"7fbaa088-f753-4574-fd50-fef91ecf5d00","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["WARNING:absl:`lr` is deprecated in Keras optimizer, please use `learning_rate` or use the legacy optimizer, e.g.,tf.keras.optimizers.legacy.Adam.\n"]},{"output_type":"stream","name":"stdout","text":["Model: \"model\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," input_1 (InputLayer)        [(None, 128, 128, 3)]     0         \n","                                                                 \n"," conv2d (Conv2D)             (None, 128, 128, 64)      1792      \n","                                                                 \n"," conv2d_1 (Conv2D)           (None, 128, 128, 64)      36928     \n","                                                                 \n"," max_pooling2d (MaxPooling2  (None, 64, 64, 64)        0         \n"," D)                                                              \n","                                                                 \n"," flatten (Flatten)           (None, 262144)            0         \n","                                                                 \n"," dense (Dense)               (None, 128)               33554560  \n","                                                                 \n"," dense_1 (Dense)             (None, 4)                 516       \n","                                                                 \n","=================================================================\n","Total params: 33593796 (128.15 MB)\n","Trainable params: 33593796 (128.15 MB)\n","Non-trainable params: 0 (0.00 Byte)\n","_________________________________________________________________\n"]}]},{"cell_type":"code","source":["history = model.fit(\n","    train_generator,\n","    steps_per_epoch=train_generator.samples // train_generator.batch_size,\n","    epochs=25,\n","    validation_data=validation_generator,\n","    validation_steps=validation_generator.samples // validation_generator.batch_size)\n"],"metadata":{"id":"v3Hqf9IP31cX","executionInfo":{"status":"ok","timestamp":1714444051841,"user_tz":240,"elapsed":3165319,"user":{"displayName":"Priya Gannavarapu","userId":"05698143431263140652"}},"outputId":"91c3c56b-1e30-46a6-b6e3-1f3c826cca43","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/25\n","142/142 [==============================] - 730s 5s/step - loss: 2.2504 - accuracy: 0.6508 - val_loss: 0.8910 - val_accuracy: 0.6741\n","Epoch 2/25\n","142/142 [==============================] - 698s 5s/step - loss: 0.5435 - accuracy: 0.7960 - val_loss: 0.9606 - val_accuracy: 0.6259\n","Epoch 3/25\n","142/142 [==============================] - 731s 5s/step - loss: 0.4532 - accuracy: 0.8275 - val_loss: 0.8052 - val_accuracy: 0.7188\n","Epoch 4/25\n","142/142 [==============================] - 731s 5s/step - loss: 0.4006 - accuracy: 0.8451 - val_loss: 0.7437 - val_accuracy: 0.7402\n","Epoch 5/25\n","142/142 [==============================] - 736s 5s/step - loss: 0.4314 - accuracy: 0.8352 - val_loss: 0.8966 - val_accuracy: 0.6902\n","Epoch 6/25\n","142/142 [==============================] - 730s 5s/step - loss: 0.3499 - accuracy: 0.8660 - val_loss: 0.8450 - val_accuracy: 0.6893\n","Epoch 7/25\n","142/142 [==============================] - 698s 5s/step - loss: 0.3248 - accuracy: 0.8806 - val_loss: 0.6141 - val_accuracy: 0.7741\n","Epoch 8/25\n","142/142 [==============================] - 697s 5s/step - loss: 0.3096 - accuracy: 0.8806 - val_loss: 0.7253 - val_accuracy: 0.7679\n","Epoch 9/25\n","142/142 [==============================] - 740s 5s/step - loss: 0.2980 - accuracy: 0.8837 - val_loss: 0.6833 - val_accuracy: 0.7732\n","Epoch 10/25\n","142/142 [==============================] - 736s 5s/step - loss: 0.2904 - accuracy: 0.8923 - val_loss: 0.7617 - val_accuracy: 0.7625\n","Epoch 11/25\n","142/142 [==============================] - 696s 5s/step - loss: 0.2684 - accuracy: 0.8965 - val_loss: 0.6637 - val_accuracy: 0.7830\n","Epoch 12/25\n","142/142 [==============================] - 733s 5s/step - loss: 0.2546 - accuracy: 0.8984 - val_loss: 0.7201 - val_accuracy: 0.7411\n","Epoch 13/25\n","142/142 [==============================] - 745s 5s/step - loss: 0.2649 - accuracy: 0.8998 - val_loss: 0.6703 - val_accuracy: 0.7804\n","Epoch 14/25\n","142/142 [==============================] - 712s 5s/step - loss: 0.2372 - accuracy: 0.9123 - val_loss: 0.6921 - val_accuracy: 0.7955\n","Epoch 15/25\n","142/142 [==============================] - 751s 5s/step - loss: 0.2080 - accuracy: 0.9200 - val_loss: 0.7073 - val_accuracy: 0.7902\n","Epoch 16/25\n","142/142 [==============================] - 750s 5s/step - loss: 0.2228 - accuracy: 0.9178 - val_loss: 0.6775 - val_accuracy: 0.8009\n","Epoch 17/25\n","142/142 [==============================] - 719s 5s/step - loss: 0.1897 - accuracy: 0.9284 - val_loss: 0.7601 - val_accuracy: 0.7830\n","Epoch 18/25\n","142/142 [==============================] - 747s 5s/step - loss: 0.1859 - accuracy: 0.9275 - val_loss: 0.7211 - val_accuracy: 0.8161\n","Epoch 19/25\n","142/142 [==============================] - 747s 5s/step - loss: 0.1912 - accuracy: 0.9255 - val_loss: 0.7244 - val_accuracy: 0.7929\n","Epoch 20/25\n","142/142 [==============================] - 714s 5s/step - loss: 0.1980 - accuracy: 0.9262 - val_loss: 0.6352 - val_accuracy: 0.8286\n","Epoch 21/25\n","142/142 [==============================] - 753s 5s/step - loss: 0.1706 - accuracy: 0.9385 - val_loss: 0.6493 - val_accuracy: 0.8214\n","Epoch 22/25\n","142/142 [==============================] - 739s 5s/step - loss: 0.1770 - accuracy: 0.9365 - val_loss: 0.7946 - val_accuracy: 0.7902\n","Epoch 23/25\n","142/142 [==============================] - 738s 5s/step - loss: 0.1608 - accuracy: 0.9414 - val_loss: 0.6742 - val_accuracy: 0.8196\n","Epoch 24/25\n","142/142 [==============================] - 709s 5s/step - loss: 0.1622 - accuracy: 0.9407 - val_loss: 0.6084 - val_accuracy: 0.8205\n","Epoch 25/25\n","142/142 [==============================] - 744s 5s/step - loss: 0.1615 - accuracy: 0.9365 - val_loss: 0.6194 - val_accuracy: 0.8250\n"]}]},{"cell_type":"code","source":["test_predictions = model.predict(validation_generator)\n","test_predictions_classes = np.argmax(test_predictions, axis=1)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"V2bQazgji8RW","executionInfo":{"status":"ok","timestamp":1714444312947,"user_tz":240,"elapsed":82541,"user":{"displayName":"Priya Gannavarapu","userId":"05698143431263140652"}},"outputId":"3872d5c2-43d3-48ea-a801-c2c6e8d741c5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["36/36 [==============================] - 50s 1s/step\n"]}]},{"cell_type":"code","source":["true_classes = validation_generator.classes\n","true_classes"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NsD1fl6l2HUs","executionInfo":{"status":"ok","timestamp":1714444458150,"user_tz":240,"elapsed":306,"user":{"displayName":"Priya Gannavarapu","userId":"05698143431263140652"}},"outputId":"6e8203b9-01c8-4ecc-d887-7538192d3bdc"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0, 0, 0, ..., 3, 3, 3], dtype=int32)"]},"metadata":{},"execution_count":37}]},{"cell_type":"code","source":["from sklearn.metrics import confusion_matrix\n","# Compute overall confusion matrix\n","overall_cm = confusion_matrix(true_classes, test_predictions_classes)\n","print(overall_cm)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gDLMfaiU2KSn","executionInfo":{"status":"ok","timestamp":1714444462054,"user_tz":240,"elapsed":628,"user":{"displayName":"Priya Gannavarapu","userId":"05698143431263140652"}},"outputId":"e7ad0131-dcb5-4351-9e3d-b4f72e4bc3ca"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[ 73  49  59  83]\n"," [ 68  34  92  73]\n"," [ 86  62  79  92]\n"," [ 55  53  82 101]]\n"]}]},{"cell_type":"code","source":["from sklearn.metrics import precision_score, recall_score, f1_score\n","# Calculate overall precision, recall, and F1 score\n","overall_precision = precision_score(true_classes, test_predictions_classes, average='weighted')\n","overall_recall = recall_score(true_classes, test_predictions_classes, average='weighted')\n","overall_f1_score = f1_score(true_classes, test_predictions_classes, average='weighted')\n","\n","print(\"Overall Precision:\", overall_precision)\n","print(\"Overall Recall:\", overall_recall)\n","print(\"Overall F1 Score:\", overall_f1_score)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zx5l9t_JjRh4","executionInfo":{"status":"ok","timestamp":1714444467684,"user_tz":240,"elapsed":363,"user":{"displayName":"Priya Gannavarapu","userId":"05698143431263140652"}},"outputId":"3c2e3295-5049-466f-ea26-01416e9a253a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Overall Precision: 0.2446768150668735\n","Overall Recall: 0.25153374233128833\n","Overall F1 Score: 0.2465923133843351\n"]}]}],"metadata":{"colab":{"provenance":[{"file_id":"/v2/external/notebooks/intro.ipynb","timestamp":1713406725105}]},"kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}